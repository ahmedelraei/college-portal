# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

input AdminLoginInput {
  email: String!
  password: String!
}

input BulkRegistrationInput {
  courseIds: [Int!]!
  semester: String!
  year: Int!
}

type Course {
  courseCode: String!
  courseName: String!
  createdAt: DateTime!
  creditHours: Int!
  dependentCourses: [Course!]
  description: String!
  id: Int!
  isActive: Boolean!
  prerequisites: [Course!]
  pricePerCredit: Float!
  semester: String!
  totalCost: Float!
  updatedAt: DateTime!
}

input CourseFilterInput {
  creditHours: Int
  search: String
  semester: String
}

input CreateCourseInput {
  courseCode: String!
  courseName: String!
  creditHours: Int!
  description: String!
  isActive: Boolean = true
  prerequisiteIds: [Int!]
  pricePerCredit: Int
  semester: String!
}

input CreateRegistrationInput {
  courseId: Int!
  semester: String!
  year: Int!
}

input CreateStudentInput {
  email: String!
  firstName: String!
  lastName: String!
  password: String!
  studentId: Int!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

input LoginInput {
  password: String!
  studentId: Int!
}

type LoginResponse {
  message: String!
  user: User!
}

type LogoutResponse {
  message: String!
}

type Mutation {
  adminLogin(adminLoginInput: AdminLoginInput!): LoginResponse!
  assignGrade(grade: String!, registrationId: Int!): Registration!
  bulkRegisterForCourses(bulkRegisterInput: BulkRegistrationInput!): [Registration!]!
  createCourse(createCourseInput: CreateCourseInput!): Course!
  createStudent(createStudentInput: CreateStudentInput!): User!
  deleteCourse(id: Int!): String!
  dropCourse(registrationId: Int!): String!
  login(loginInput: LoginInput!): LoginResponse!
  logout: LogoutResponse!
  register(registerInput: RegisterInput!): User!
  registerForCourse(registerInput: CreateRegistrationInput!): Registration!
  toggleRegistration(enabled: Boolean!): SystemSettings!
  updateCourse(id: Int!, updateCourseInput: UpdateCourseInput!): Course!
  updateSystemSetting(input: UpdateSettingInput!): SystemSettings!
}

type Query {
  getAllCourses(filters: CourseFilterInput): [Course!]!
  getAllRegistrations: [Registration!]!
  getAllSettings: [SystemSettings!]!
  getAllStudents: [User!]!
  getAvailableCourses(filters: CourseFilterInput): [Course!]!
  getCourseById(id: Int!): Course!
  getMyCurrentSemesterRegistrations(semester: String!, year: Int!): [Registration!]!
  getMyRegistrations: [Registration!]!
  isAuthenticated: Boolean!
  isRegistrationEnabled: Boolean!
  me: User
}

input RegisterInput {
  email: String!
  firstName: String!
  lastName: String!
  password: String!
  studentId: Int!
}

type Registration {
  calculateGradePoints: Float
  course: Course!
  courseId: Int!
  createdAt: DateTime!
  droppedAt: DateTime
  grade: String
  gradePoints: Float
  id: Int!
  isCompleted: Boolean!
  isDropped: Boolean!
  paymentStatus: String!
  semester: String!
  student: Student
  studentId: Int!
  updatedAt: DateTime!
  year: Int!
}

type Student {
  createdAt: DateTime!
  currentGPA: Float!
  email: String!
  firstName: String!
  fullName: String!
  id: Int!
  isActive: Boolean!
  lastName: String!
  role: String!
  studentId: Int!
  updatedAt: DateTime!
  user: User
  userId: Int!
}

type SystemSettings {
  createdAt: DateTime!
  description: String
  id: Int!
  settingKey: String!
  settingValue: String!
  updatedAt: DateTime!
}

input UpdateCourseInput {
  courseCode: String
  courseName: String
  creditHours: Int
  description: String
  isActive: Boolean
  prerequisiteIds: [Int!]
  pricePerCredit: Int
  semester: String
}

input UpdateSettingInput {
  settingKey: String!
  settingValue: String!
}

type User {
  createdAt: DateTime!
  currentGPA: Float
  email: String!
  firstName: String!
  fullName: String!
  id: Int!
  isActive: Boolean!
  lastName: String!
  role: String!
  studentId: Int
  updatedAt: DateTime!
}